@model dynamic
@using IMS.Domain.Enums

@{
    ViewData["Title"] = "Orders";
    var orders = ViewBag.Orders as IEnumerable<IMS.Application.DTOs.Order.Responce.OrderResponseDto>;
    int totalCount = (int)ViewBag.TotalCount;
    int pageNumber = (int)ViewBag.PageNumber;
    int pageSize = (int)ViewBag.PageSize;
    int totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
    OrderStatus? statusFilter = ViewBag.StatusFilter;
    var allStatuses = ViewBag.OrderStatuses as List<OrderStatus> ?? new List<OrderStatus>();
    string sortBy = ViewBag.SortBy;
    bool sortDescending = ViewBag.SortDescending;
}

<!-- Add Anti-Forgery Token Form -->
<form id="antiForgeryForm">
    @Html.AntiForgeryToken()
</form>

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-0">
        <h3 class="fw-semibold mb-1 d-flex align-items-center" style="color: #608fc8; font-size: 1.5rem;">
            <i class="bi bi-clipboard-check me-2"></i> Orders Management
        </h3>
        <a asp-action="Create" class="btn btn-primary rounded-pill px-4 fw-semibold d-flex align-items-center">
            <i class="bi bi-plus-lg me-2"></i> Create New Order
        </a>
    </div>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-primary text-white py-3 d-flex justify-content-between align-items-center">
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-light rounded-pill px-3 d-flex align-items-center" type="button"
                        id="statusFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-filter me-1"></i>
                    @if (statusFilter != null)
                    {
                        @:Filter: @statusFilter
                    }
                    else
                    {
                        @:Filter by Status
                    }
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="statusFilterDropdown">
                    <li><a class="dropdown-item" href="@Url.Action("Index", new { pageNumber = 1, pageSize = pageSize, statusFilter = (OrderStatus?)null, sortBy = sortBy, sortDescending = sortDescending })">All Orders</a></li>
                    @foreach (var status in allStatuses)
                    {
                        <li><a class="dropdown-item" href="@Url.Action("Index", new { pageNumber = 1, pageSize = pageSize, statusFilter = status, sortBy = sortBy, sortDescending = sortDescending })">@status</a></li>
                    }
                </ul>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="ordersTable" width="100%" cellspacing="0">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Warehouse</th>
                            <th>Total Amount</th>
                            <th>Status</th>
                            <th>Created By</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (orders != null && orders.Any())
                        {
                            int i = 1 + (pageNumber - 1) * pageSize;
                            @foreach (var order in orders)
                            {
                                <tr data-order-id="@order.OrderID">
                                    <td>@i</td>
                                    <td>@order.OrderDate.ToString("g")</td>
                                    <td>@order.CustomerName</td>
                                    <td>@order.WarehouseName</td>
                                    <td>@order.TotalAmount.ToString("C")</td>
                                    <td>
                                        <span class="badge" data-status="@order.Status">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>@order.CreatedByUserName</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@order.OrderID"
                                               class="btn btn-info btn-sm" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@order.OrderID"
                                               class="btn btn-warning btn-sm edit-button" title="Edit"
                                               style="@(order.Status == OrderStatus.Pending ? "" : "display:none;")">
                                                <i class="bi bi-pencil-square"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@order.OrderID"
                                               class="btn btn-danger btn-sm delete-button" title="Delete"
                                               style="@(order.Status == OrderStatus.Cancelled ? "" : "display:none;")">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                            @if (order.Status != OrderStatus.Delivered)
                                            {
                                                <select class="form-select form-select-sm status-select"
                                                        data-order-id="@order.OrderID"
                                                        aria-label="Change status for order @order.OrderID">
                                                    <option value="" disabled selected>Change Status</option>
                                                    @foreach (var status in allStatuses)
                                                    {
                                                        bool isValidTransition = (order.Status, status) switch
                                                        {
                                                            (OrderStatus.Pending, OrderStatus.Confirmed) => true,
                                                            (OrderStatus.Pending, OrderStatus.Cancelled) => true,
                                                            (OrderStatus.Confirmed, OrderStatus.Pending) => true,
                                                            (OrderStatus.Confirmed, OrderStatus.Shipped) => true,
                                                            (OrderStatus.Confirmed, OrderStatus.Cancelled) => true,
                                                            (OrderStatus.Shipped, OrderStatus.Pending) => true,
                                                            (OrderStatus.Shipped, OrderStatus.Confirmed) => true,
                                                            (OrderStatus.Shipped, OrderStatus.Delivered) => true,
                                                            (OrderStatus.Cancelled, OrderStatus.Pending) => true,
                                                            _ => false
                                                        };
                                                        if (isValidTransition && status != order.Status)
                                                        {
                                                            <option value="@status">@status</option>
                                                        }
                                                    }
                                                </select>
                                            }
                                        </div>
                                    </td>
                                </tr>
                                i++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center text-muted py-4">
                                    <i class="bi bi-box-seam fs-4 mb-2"></i>
                                    <p class="mb-0">No orders found@(statusFilter.HasValue ? $" for status {statusFilter}" : "")</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (totalPages > 1)
            {
                <nav class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(pageNumber == 1 ? "disabled" : "")">
                            <a class="page-link"
                               asp-action="Index"
                               asp-route-pageNumber="@(pageNumber - 1)"
                               asp-route-pageSize="@pageSize"
                               asp-route-statusFilter="@statusFilter"
                               asp-route-sortBy="@sortBy"
                               asp-route-sortDescending="@sortDescending">
                                Previous
                            </a>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == pageNumber ? "active" : "")">
                                <a class="page-link"
                                   asp-action="Index"
                                   asp-route-pageNumber="@i"
                                   asp-route-pageSize="@pageSize"
                                   asp-route-statusFilter="@statusFilter"
                                   asp-route-sortBy="@sortBy"
                                   asp-route-sortDescending="@sortDescending">
                                    @i
                                </a>
                            </li>
                        }
                        <li class="page-item @(pageNumber == totalPages ? "disabled" : "")">
                            <a class="page-link"
                               asp-action="Index"
                               asp-route-pageNumber="@(pageNumber + 1)"
                               asp-route-pageSize="@pageSize"
                               asp-route-statusFilter="@statusFilter"
                               asp-route-sortBy="@sortBy"
                               asp-route-sortDescending="@sortDescending">
                                Next
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
        .d-flex.justify-content-between.align-items-center.mb-0 {
            margin-bottom: 1rem !important;
        }

        .container-fluid {
            max-width: 1400px;
        }

        .card {
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .card-header {
            background-color: #608fc8 !important;
            border-bottom: none;
            padding: 1rem 1.5rem;
        }

        h3.fw-semibold {
            color: #608fc8 !important;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
        }

        /* Filter Button */
        .dropdown .btn-outline-light {
            background-color: white !important;
            color: #608fc8 !important;
            border-color: white !important;
            border-radius: 50rem !important;
            padding: 0.375rem 1rem;
            font-weight: 500;
        }

        .dropdown-menu {
            border-radius: 0.5rem;
            box-shadow: 0 8px 24px rgba(0,0,0,0.05);
        }

        .dropdown-item:hover {
            background-color: #f1f5fb;
        }

        /* Table Styling */
        .table {
            font-size: 0.9rem;
            margin-bottom: 0;
        }

        .table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #333;
            border-bottom: 1px solid #eaeaea;
            padding: 0.75rem;
            vertical-align: middle;
        }

        .table td {
            vertical-align: middle;
            padding: 0.75rem;
        }

        /* Action Buttons */
        .btn-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .btn {
            border-radius: 0.375rem !important;
            font-size: 0.875rem;
            font-weight: 500;
            padding: 0.4rem 0.9rem;
        }

        .btn-sm {
            padding: 0.3rem 0.7rem;
            font-size: 0.8rem;
            min-width: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn-primary {
            background-color: #608fc8;
            border-color: #608fc8;
        }

        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
        }

        .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

        /* Status Badges */
        .badge {
            border-radius: 0.25rem;
            padding: 0.4em 0.6em;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .badge-pending {
            background-color: #ffc107;
            color: #212529;
        }

        .badge-confirmed {
            background-color: #17a2b8;
            color: #fff;
        }

        .badge-shipped {
            background-color: #007bff;
            color: #fff;
        }

        .badge-delivered {
            background-color: #28a745;
            color: #fff;
        }

        .badge-cancelled {
            background-color: #dc3545;
            color: #fff;
        }

        /* Status Dropdown */
        .status-select {
            width: 140px;
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
            border-radius: 0.375rem;
            border: 1px solid #ced4da;
            margin-left: 0.5rem;
        }

        /* Toast */
        .toast {
            border-radius: 0.375rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            font-size: 0.9rem;
        }

        /* Pagination */
        .pagination .page-link {
            border-radius: 0.375rem;
        }

        .pagination .active .page-link {
            background-color: #608fc8;
            border-color: #608fc8;
        }

        /* Responsive Adjustments */
        @@media (max-width: 768px) {
            .btn-group {
                flex-direction: column;
                align-items: flex-start;
            }

            .status-select {
                margin-top: 0.5rem;
                margin-left: 0;
                width: 100%;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script>
        // Pass OrderStatuses to JavaScript with string names
        const orderStatuses = {
            'Pending': 0,
            'Confirmed': 1,
            'Shipped': 2,
            'Delivered': 3,
            'Cancelled': 4
        };

        // Define valid transitions for OrderStatus
        const validTransitions = {
            'Pending': ['Confirmed', 'Cancelled'],
            'Confirmed': ['Pending', 'Shipped', 'Cancelled'],
            'Shipped': ['Pending', 'Confirmed', 'Delivered'],
            'Cancelled': ['Pending']
        };

        $(document).ready(function () {
            // Initialize DataTable
            const table = $('#ordersTable').DataTable({
                responsive: true,
                language: {
                    emptyTable: "No orders found",
                    info: "Showing _START_ to _END_ of _TOTAL_ orders",
                    infoEmpty: "Showing 0 to 0 of 0 orders",
                    infoFiltered: "(filtered from _MAX_ total orders)",
                    lengthMenu: "Show _MENU_ orders per page",
                    search: "Search:",
                    zeroRecords: "No matching orders found"
                },
                paging: false,
                searching: false,
                info: false,
                columnDefs: [
                    { orderable: true, targets: [1, 2, 3, 4, 5, 6] }, // Sortable: Date, Customer, Warehouse, Total Amount, Status, Created By
                    { orderable: false, targets: [0, 7] }, // Non-sortable: #, Actions
                    { responsivePriority: 1, targets: [0, 7] }, // #, Actions
                    { responsivePriority: 2, targets: [2, 5] } // Customer, Status
                ],
                drawCallback: function () {
                    // Apply badge classes after table draw
                    $('span.badge').each(function () {
                        const status = $(this).data('status').toString();
                        $(this).addClass(getStatusBadgeClass(status));
                    });
                }
            });

            // Handle column sorting
            $('#ordersTable thead th').on('click', function () {
                const columnIndex = table.column(this).index();
                const columnMap = [
                    '',                  // 0 (#)
                    'OrderDate',        // 1
                    'CustomerName',     // 2
                    'WarehouseName',    // 3
                    'TotalAmount',      // 4
                    'Status',           // 5
                    'CreatedByUserName',// 6
                    ''                  // 7 (Actions)
                ];
                const columnName = columnMap[columnIndex];
                if (columnName) {
                    const currentSortBy = '@sortBy';
                    const currentSortDescending = @Json.Serialize(sortDescending);
                    const newSortDescending = currentSortBy === columnName ? !currentSortDescending : false;
                    window.location.href = '@Url.Action("Index", new { pageNumber = 1, pageSize = pageSize, statusFilter = statusFilter })&sortBy=' + columnName + '&sortDescending=' + newSortDescending;
                }
            });

            // Handle status change
            $(document).on('change', '.status-select', function () {
                const orderId = $(this).data('order-id');
                const newStatus = $(this).val();
                const $row = $(this).closest('tr');
                const $badge = $row.find('.badge');
                const $select = $(this);
                const originalStatus = $badge.data('status');

                if (!orderId || !newStatus) {
                    showToast('Invalid order or status.', 'danger');
                    return;
                }

                // Get anti-forgery token
                const token = $('#antiForgeryForm input[name="__RequestVerificationToken"]').val();
                if (!token) {
                    showToast('Error: Anti-forgery token not found.', 'danger');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("UpdateStatus", "Orders")',
                    type: 'POST',
                    data: {
                        id: orderId,
                        status: newStatus,
                        __RequestVerificationToken: token
                    },
                    success: function (response) {
                        if (response.success) {
                            // Update badge text and class
                            $badge.text(newStatus).data('status', newStatus);
                            $badge.removeClass('badge-pending badge-confirmed badge-shipped badge-delivered badge-cancelled')
                                  .addClass(getStatusBadgeClass(newStatus));
                            showToast(response.message, 'success');

                            // Update Edit button visibility
                            const $editButton = $row.find('.edit-button');
                            if (newStatus === 'Pending') {
                                $editButton.show();
                            } else {
                                $editButton.hide();
                            }

                            // Update Delete button visibility
                            const $deleteButton = $row.find('.delete-button');
                            if (newStatus === 'Cancelled') {
                                $deleteButton.show();
                            } else {
                                $deleteButton.hide();
                            }

                            // If status is Delivered, remove the dropdown
                            if (newStatus === 'Delivered') {
                                $select.remove();
                            } else {
                                // Regenerate dropdown options based on valid transitions
                                $select.empty();
                                $select.append('<option value="" disabled selected>Change Status</option>');
                                const allowedStatuses = validTransitions[newStatus] || [];
                                for (const statusName of allowedStatuses) {
                                    $select.append(`<option value="${statusName}">${statusName}</option>`);
                                }
                            }

                            // Redraw the row to ensure DataTable updates
                            table.row($row).invalidate().draw();
                        } else {
                            showToast('Error: ' + response.message, 'danger');
                            $select.val('');
                        }
                    },
                    error: function (xhr) {
                        const errorMsg = xhr.responseJSON?.message || xhr.responseText || 'Failed to update status.';
                        showToast('Error: ' + errorMsg, 'danger');
                        $select.val('');
                    }
                });
            });
        });

        function getStatusBadgeClass(status) {
            switch (status) {
                case 'Pending': return 'badge-pending';
                case 'Confirmed': return 'badge-confirmed';
                case 'Shipped': return 'badge-shipped';
                case 'Delivered': return 'badge-delivered';
                case 'Cancelled': return 'badge-cancelled';
                default: return 'badge-secondary';
            }
        }

        function showToast(message, type) {
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);

            $('#toastContainer').append(toast);
            const bsToast = new bootstrap.Toast(toast[0], { delay: 3000 });
            bsToast.show();

            toast.on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }
    </script>
}
