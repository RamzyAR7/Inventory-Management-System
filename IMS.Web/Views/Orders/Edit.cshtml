@model OrderReqDto
@using IMS.BLL.DTOs.Order.Request
@using IMS.Domain.Entities

@{
    ViewData["Title"] = "Edit Order";
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="fw-semibold mb-1 d-flex align-items-center" style="color: #608fc8; font-size: 1.5rem;">
            <i class="fas fa-edit me-2"></i> Edit Order
        </h3>
        <a asp-action="Index" class="btn btn-outline-secondary rounded-pill px-4 fw-semibold d-flex align-items-center">
            <i class="fas fa-arrow-left me-2"></i> Back to Orders
        </a>
    </div>

    @if (TempData["error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-primary text-white py-3">
            <h6 class="m-0 font-weight-bold">Order Information</h6>
        </div>
        <div class="card-body p-4">
            <form id="orderForm" asp-action="Edit" asp-route-id="@Model.OrderID" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="OrderID" />
                <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="CustomerID" class="form-label font-weight-bold">Customer</label>
                        <select asp-for="CustomerID" class="form-select" asp-items="ViewBag.Customers">
                            <option value="">Select Customer</option>
                        </select>
                        <span asp-validation-for="CustomerID" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="WarehouseID" class="form-label font-weight-bold">Warehouse</label>
                        <select asp-for="WarehouseID" class="form-select" asp-items="ViewBag.Warehouses" onchange="loadCategories()">
                            <option value="">Select Warehouse</option>
                        </select>
                        <span asp-validation-for="WarehouseID" class="text-danger"></span>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="button" id="selectProductsBtn" class="btn btn-primary mb-3">
                        <i class="fas fa-plus me-2"></i> Select Products
                    </button>
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" id="selectedProductsTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Unit Price</th>
                                    <th>Total Price</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="selectedProductsTableBody">
                                @if (Model.OrderDetails == null || !Model.OrderDetails.Any())
                                {
                                    <tr>
                                        <td colspan="5" class="text-center text-muted">No products selected</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="text-end mt-3">
                        <h5>Total Amount: <span id="totalAmount" class="font-weight-bold text-primary">$0.00</span></h5>
                    </div>
                </div>

                <div class="text-end mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i> Update Order
                    </button>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-times me-2"></i> Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Product Selection Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="productModalLabel">
                    <i class="fas fa-boxes me-2"></i> Select Products
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <!-- Filter Section -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <label for="categoryFilter" class="form-label fw-bold text-dark">
                            <i class="fas fa-filter me-2"></i> Filter by Category
                        </label>
                        <div class="input-group">
                            <select id="categoryFilter" class="form-select shadow-sm" asp-items="ViewBag.Categories">
                                <option value="">All Categories</option>
                            </select>
                            <button class="btn btn-outline-secondary" type="button" onclick="loadProducts()">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <div class="input-group">
                            <input type="text" class="form-control shadow-sm" placeholder="Search products..." id="productSearch">
                            <button class="btn btn-primary" type="button">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading Spinner -->
                <div id="loadingSpinner" class="text-center my-4" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mt-2">Loading products...</p>
                </div>

                <!-- Products Table -->
                <div class="table-responsive rounded-3 border">
                    <table class="table table-hover mb-0" id="productsTable">
                        <thead class="table-light">
                            <tr>
                                <th width="25%">Product</th>
                                <th width="20%">Category</th>
                                <th width="15%">Price</th>
                                <th width="15%">Stock</th>
                                <th width="15%">Quantity</th>
                                <th width="10%">Action</th>
                            </tr>
                        </thead>
                        <tbody id="productsModalBody" class="border-top-0">
                            <!-- Products will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="text-center py-5" style="display:none;">
                    <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No products found</h5>
                    <p class="text-muted">Try adjusting your filters or search term</p>
                </div>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i> Cancel
                </button>
                <button type="button" class="btn btn-primary rounded-pill px-4" onclick="saveProducts()">
                    <i class="fas fa-check me-2"></i> Confirm Selection
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Toast Container -->
<div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <style>
        /* Modal Styling */
        .modal-content {
            border: none;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            border-radius: 10px;
            overflow: hidden;
        }

        .modal-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .modal-title {
            font-weight: 600;
            display: flex;
            align-items: center;
        }

        .modal-body {
            padding: 1.5rem;
        }

        /* Filter Section */
        .form-label {
            font-size: 0.9rem;
            color: #495057;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }

        .form-select, .form-control {
            border-radius: 6px;
            border: 1px solid #dee2e6;
            font-size: 0.9rem;
            padding: 0.5rem 1rem;
        }

            .form-select:focus, .form-control:focus {
                border-color: #608fc8;
                box-shadow: 0 0 0 0.25rem rgba(96, 143, 200, 0.25);
            }

        .input-group .btn {
            border-radius: 0 6px 6px 0;
        }

        /* Table Styling */
        .table {
            font-size: 0.9rem;
            margin-bottom: 0;
        }

            .table th {
                background-color: #f8f9fa;
                font-weight: 600;
                color: #495057;
                border-bottom: 2px solid #e9ecef;
                padding: 0.75rem 1rem;
                vertical-align: middle;
            }

            .table td {
                vertical-align: middle;
                padding: 0.75rem 1rem;
                border-top: 1px solid #e9ecef;
            }

        /* Quantity Input */
        .quantity-input {
            width: 70px;
            text-align: center;
            padding: 0.375rem 0.5rem;
        }

        /* Action Buttons */
        .btn-action {
            padding: 0.375rem 0.75rem;
            font-size: 0.8rem;
            border-radius: 4px;
        }

        /* Empty State */
        #emptyState {
            background-color: #f8f9fa;
            border-radius: 8px;
        }

        /* Responsive Adjustments */
        @@media (max-width: 768px) {
            .modal-dialog {
                margin: 0.5rem;
            }

            .modal-body {
                padding: 1rem;
            }

            .table th, .table td {
                padding: 0.5rem;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/additional-methods.min.js"></script>
    <script>
        // Initialize cart with existing order details including product names and prices
        let cart = @Html.Raw(Json.Serialize(Model.OrderDetails.Select(d => new
            {
                productId = d.ProductID.ToString(),
                productName = d.ProductName, // Get product name from navigation property
                quantity = d.Quantity,
                unitPrice = d.UnitPrice,
                totalPrice = d.UnitPrice * d.Quantity
            })));

        $(document).ready(function () {
            // Initialize form validation
            $("#orderForm").validate({
                rules: {
                    CustomerID: { required: true },
                    WarehouseID: { required: true }
                },
                messages: {
                    CustomerID: "Please select a customer",
                    WarehouseID: "Please select a warehouse"
                },
                errorElement: "span",
                errorPlacement: function (error, element) {
                    error.addClass("invalid-feedback");
                    element.closest(".form-group").append(error);
                },
                highlight: function (element) {
                    $(element).addClass("is-invalid").removeClass("is-valid");
                },
                unhighlight: function (element) {
                    $(element).removeClass("is-invalid").addClass("is-valid");
                },
                submitHandler: function (form) {
                    if (cart.length === 0) {
                        showToast('Please add at least one product to update the order.', 'danger');
                        return false;
                    }
                    form.submit();
                }
            });

            // Initialize selected products table
            updateSelectedProducts();

            // FIXED: Properly handle product modal opening
            $('#selectProductsBtn').click(function() {
                if (!$('#WarehouseID').val()) {
                    showToast('Please select a warehouse first.', 'danger');
                    return false;
                }
                // Load products first, then show modal when data is ready
                loadProducts(function() {
                    const productModal = new bootstrap.Modal(document.getElementById('productModal'));
                    productModal.show();
                });
            });

            // Load products when warehouse changes while modal is open
            $('#WarehouseID').change(function() {
                if ($('#productModal').hasClass('show')) {
                    loadProducts();
                }
            });
        });

        function loadCategories() {
            $('#categoryFilter').val('');
            loadProducts();
        }

        // Modified to accept callback function
        function loadProducts(callback) {
            const warehouseId = $('#WarehouseID').val();
            const categoryId = $('#categoryFilter').val();

            if (!warehouseId) {
                showToast('Please select a warehouse first.', 'danger');
                if (callback) callback();
                return;
            }

            $('#loadingSpinner').show();
            $('#productsTable').hide();
            $('#productsModalBody').empty();

            $.ajax({
                url: '@Url.Action("GetProductsByWarehouseAndCategory", "Orders")',
                type: 'GET',
                data: { warehouseId: warehouseId, categoryId: categoryId },
                success: function (products) {
                    $('#productsModalBody').empty();

                    // Update cart with product names and prices from server
                    products.forEach(product => {
                        const existingItem = cart.find(item => item.productId === product.productID.toString());
                        if (existingItem) {
                            // Ensure we have the latest product info
                            existingItem.productName = product.productName;
                            existingItem.unitPrice = product.price;
                            existingItem.totalPrice = product.price * existingItem.quantity;
                        }
                    });

                    // Render product table with proper data
                    products.forEach(product => {
                        const existingItem = cart.find(item => item.productId === product.productID.toString());
                        const row = `
                            <tr data-product-id="${product.productID}">
                                <td>${product.productName}</td>
                                <td>${product.categoryName}</td>
                                <td>$${product.price.toFixed(2)}</td>
                                <td>${product.stockQuantity}</td>
                                <td>
                                    <input type="number" class="form-control quantity-input"
                                           min="1" max="${product.stockQuantity}"
                                           value="${existingItem ? existingItem.quantity : 1}">
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary add-product-btn">
                                        <i class="fas fa-${existingItem ? 'sync-alt' : 'plus'}"></i>
                                        ${existingItem ? 'Update' : 'Add'}
                                    </button>
                                </td>
                            </tr>`;
                        $('#productsModalBody').append(row);
                    });

                    // Attach event handlers
                    $('.add-product-btn').off('click').on('click', function() {
                        const row = $(this).closest('tr');
                        addProductToCart(row);
                    });

                    $('#loadingSpinner').hide();
                    $('#productsTable').show();

                    // Execute callback if provided
                    if (callback) callback();
                },
                error: function (xhr) {
                    $('#loadingSpinner').hide();
                    console.error('Error loading products:', xhr.responseText);
                    showToast('Error loading products: ' + (xhr.responseJSON?.message || xhr.responseText), 'danger');
                    $('#productsModalBody').html('<tr><td colspan="6" class="text-center text-danger">Error loading products</td></tr>');
                    if (callback) callback();
                }
            });
        }

        // Rest of your functions remain the same...
        function addProductToCart(row) {
            const productId = row.data('product-id');
            const productName = row.find('td:eq(0)').text();
            const price = parseFloat(row.find('td:eq(2)').text().replace('$', ''));
            const stock = parseInt(row.find('td:eq(3)').text());
            const quantityInput = row.find('.quantity-input');
            const quantity = parseInt(quantityInput.val());
            const warehouseId = $('#WarehouseID').val();

            if (isNaN(quantity)) {
                showToast('Please enter a valid quantity', 'danger');
                quantityInput.focus();
                return;
            }

            if (quantity <= 0) {
                showToast('Quantity must be greater than 0', 'danger');
                quantityInput.focus();
                return;
            }

            if (quantity > stock) {
                showToast(`Cannot add ${quantity}. Only ${stock} available in stock`, 'danger');
                quantityInput.focus();
                return;
            }

            const existingItemIndex = cart.findIndex(item => item.productId === productId.toString());
            if (existingItemIndex >= 0) {
                // Update existing item
                cart[existingItemIndex].quantity = quantity;
                cart[existingItemIndex].totalPrice = price * quantity;
                showToast(`${productName} quantity updated`, 'success');
            } else {
                // Add new item
                cart.push({
                    productId: productId.toString(),
                    productName: productName,
                    quantity: quantity,
                    unitPrice: price,
                    totalPrice: price * quantity
                });
                showToast(`${productName} added to order`, 'success');
            }

            // Update the button to show "Update" instead of "Add"
            row.find('.add-product-btn')
               .html('<i class="fas fa-sync-alt"></i> Update')
               .removeClass('btn-primary')
               .addClass('btn-success');

            updateSelectedProducts();
        }

        function updateSelectedProducts() {
            const $tableBody = $('#selectedProductsTableBody');
            $tableBody.empty();

            let totalAmount = 0;

            if (cart.length === 0) {
                $tableBody.html('<tr><td colspan="5" class="text-center text-muted">No products selected</td></tr>');
            } else {
                cart.forEach((item, index) => {
                    totalAmount += item.totalPrice;
                    const itemHtml = `
                        <tr>
                            <td>${item.productName}</td>
                            <td>${item.quantity}</td>
                            <td>$${item.unitPrice.toFixed(2)}</td>
                            <td>$${item.totalPrice.toFixed(2)}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-danger" onclick="removeFromCart(${index})">
                                    <i class="fas fa-trash-alt"></i> Remove
                                </button>
                                <input type="hidden" name="OrderDetails[${index}].ProductID" value="${item.productId}" />
                                <input type="hidden" name="OrderDetails[${index}].Quantity" value="${item.quantity}" />
                            </td>
                        </tr>`;
                    $tableBody.append(itemHtml);
                });
            }

            $('#totalAmount').text('$' + totalAmount.toFixed(2));
        }

        function removeFromCart(index) {
            const productName = cart[index].productName;
            cart.splice(index, 1);
            updateSelectedProducts();
            showToast(`${productName} removed from order`, 'warning');

            // Update the button in the modal if it's open
            if ($('#productModal').hasClass('show')) {
                loadProducts();
            }
        }

        function saveProducts() {
            if (cart.length === 0) {
                showToast('Please add at least one product.', 'danger');
                return;
            }
            updateSelectedProducts();
            $('#productModal').modal('hide');
        }

        function showToast(message, type) {
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);

            $('#toastContainer').append(toast);
            const bsToast = new bootstrap.Toast(toast[0], { delay: 3000 });
            bsToast.show();

            toast.on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }
    </script>
}