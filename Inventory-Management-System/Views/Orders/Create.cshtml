@model OrderReqDto
@using IMS.BAL.DTOs.Order.Request
@using IMS.Data.Entities

@{
    ViewData["Title"] = "Create Order";
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="fw-semibold mb-1 d-flex align-items-center" style="color: #608fc8; font-size: 1.5rem;">
            <i class="fas fa-plus-circle me-2"></i> Create New Order
        </h3>
        <a asp-action="Index" class="btn btn-outline-secondary rounded-pill px-4 fw-semibold d-flex align-items-center">
            <i class="fas fa-arrow-left me-2"></i> Back to Orders
        </a>
    </div>

    @if (TempData["error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-primary text-white py-3">
            <h6 class="m-0 font-weight-bold">Order Information</h6>
        </div>
        <div class="card-body p-4">
            <form id="orderForm" asp-action="Create" method="post">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="All" class="text-danger mb-4"></div>

                <!-- Customer and Warehouse Selection -->
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="CustomerID" class="form-label font-weight-bold">Customer</label>
                        <select asp-for="CustomerID" class="form-select shadow-sm" asp-items="ViewBag.Customers">
                            <option value="">Select Customer</option>
                        </select>
                        <span asp-validation-for="CustomerID" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label asp-for="WarehouseID" class="form-label font-weight-bold">Warehouse</label>
                        <select asp-for="WarehouseID" class="form-select shadow-sm" asp-items="ViewBag.Warehouses" onchange="loadCategories()">
                            <option value="">Select Warehouse</option>
                        </select>
                        <span asp-validation-for="WarehouseID" class="text-danger"></span>
                    </div>
                </div>

                <!-- Product Selection and Cart -->
                <div class="mt-4">
                    <button type="button" id="selectProductsBtn" class="btn btn-primary mb-3" disabled>
                        <i class="fas fa-plus me-2"></i> Select Products
                    </button>
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" id="selectedProductsTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Unit Price</th>
                                    <th>Total Price</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="productsTableBody">
                                <tr>
                                    <td colspan="5" class="text-center text-muted">No products selected</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="text-end mt-3">
                        <h5>Total Amount: <span id="totalAmount" class="font-weight-bold text-primary">$0.00</span></h5>
                    </div>
                </div>

                <!-- Form Submission -->
                <div class="text-end mt-4">
                    <button type="submit" class="btn btn-primary rounded-pill px-4">
                        <i class="fas fa-save me-2"></i> Create Order
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Product Selection Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="productModalLabel">
                    <i class="fas fa-boxes me-2"></i> Select Products
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <!-- Filter Section -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <label for="categoryFilter" class="form-label fw-bold text-dark">
                            <i class="fas fa-filter me-2"></i> Filter by Category
                        </label>
                        <div class="input-group">
                            <select id="categoryFilter" class="form-select shadow-sm" asp-items="ViewBag.Categories" onchange="loadProducts()">
                                <option value="">All Categories</option>
                            </select>
                            <button class="btn btn-outline-secondary" type="button" onclick="loadProducts()">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <div class="input-group">
                            <input type="text" class="form-control shadow-sm" placeholder="Search products..." id="productSearch">
                            <button class="btn btn-primary" type="button">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading Spinner -->
                <div id="loadingSpinner" class="text-center my-4" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mt-2">Loading products...</p>
                </div>

                <!-- Products Table -->
                <div class="table-responsive rounded-3 border">
                    <table class="table table-hover mb-0" id="productsTable">
                        <thead class="table-light">
                            <tr>
                                <th width="25%">Product</th>
                                <th width="20%">Category</th>
                                <th width="15%">Price</th>
                                <th width="15%">Stock</th>
                                <th width="15%">Quantity</th>
                                <th width="10%">Action</th>
                            </tr>
                        </thead>
                        <tbody id="productsModalBody" class="border-top-0">
                            <!-- Products will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="text-center py-5" style="display:none;">
                    <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No products found</h5>
                    <p class="text-muted">Try adjusting your filters or search term</p>
                </div>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i> Cancel
                </button>
                <button type="button" class="btn btn-primary rounded-pill px-4" onclick="saveProducts()">
                    <i class="fas fa-check me-2"></i> Confirm Selection
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <style>
        /* Main Header Styling */
        .d-flex.justify-content-between.align-items-center.mb-4 {
            margin-bottom: 1rem !important;
        }

        h3.fw-semibold {
            color: #608fc8 !important;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
        }

        /* Card Styling */
        .card {
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .card-header {
            background-color: #608fc8 !important;
            color: white !important;
            padding: 1rem 1.5rem;
            border-bottom: none;
        }

            .card-header h6 {
                font-weight: 600;
                margin-bottom: 0;
            }

        /* Back Button */
        .btn-outline-secondary {
            border-color: #6c757d;
            color: #6c757d;
            border-radius: 50rem !important;
            padding: 0.5rem 1.25rem;
            font-weight: 500;
        }

            .btn-outline-secondary:hover {
                background-color: #6c757d;
                color: #fff;
            }

        /* Form Elements */
        .form-label {
            font-weight: 500;
            color: #495057;
            margin-bottom: 0.5rem;
        }

        .form-select, .form-control {
            border-radius: 0.375rem;
            padding: 0.5rem 0.75rem;
            border: 1px solid #ced4da;
        }

            .form-select:focus, .form-control:focus {
                border-color: #608fc8;
                box-shadow: 0 0 0 0.25rem rgba(96, 143, 200, 0.25);
            }

        /* Buttons */
        .btn {
            border-radius: 0.375rem;
            font-weight: 500;
            padding: 0.5rem 1.25rem;
            transition: all 0.2s ease;
        }

        .btn-primary {
            background-color: #608fc8;
            border-color: #608fc8;
        }

            .btn-primary:hover {
                background-color: #4a7ab9;
                border-color: #4a7ab9;
            }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

            .btn-danger:hover {
                background-color: #c82333;
                border-color: #c82333;
            }

        /* Tables */
        .table {
            font-size: 0.9rem;
            margin-bottom: 0;
        }

            .table th {
                background-color: #f8f9fa;
                font-weight: 600;
                color: #495057;
                padding: 0.75rem;
                white-space: nowrap;
            }

            .table td {
                vertical-align: middle;
                padding: 0.75rem;
            }

        /* Modal */
        .modal-content {
            border-radius: 0.5rem;
            border: none;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            background-color: #608fc8;
            color: white;
            padding: 1rem 1.5rem;
            border-bottom: none;
        }

        .modal-title {
            font-weight: 600;
        }

        .btn-close-white {
            filter: invert(1);
        }

        /* Quantity Input */
        .quantity-input {
            width: 80px;
            text-align: center;
        }

        /* Total Amount */
        #totalAmount {
            color: #608fc8;
            font-size: 1.25rem;
        }

        /* Alerts */
        .alert {
            border-radius: 0.375rem;
            padding: 0.75rem 1.25rem;
        }

        /* Validation */
        .text-danger {
            font-size: 0.85rem;
            margin-top: 0.25rem;
        }

        /* Responsive Adjustments */
        @@media (max-width: 768px) {
            .btn-group {
                flex-direction: column;
                align-items: flex-start;
            }

            .status-select {
                margin-top: 0.5rem;
                margin-left: 0;
                width: 100%;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/additional-methods.min.js"></script>
    <script>
        let cart = [];

        $(document).ready(function () {
            const $selectProductsBtn = $('#selectProductsBtn');

            $("#orderForm").validate({
                rules: {
                    CustomerID: { required: true },
                    WarehouseID: { required: true }
                },
                messages: {
                    CustomerID: "Please select a customer",
                    WarehouseID: "Please select a warehouse"
                },
                errorElement: "span",
                errorPlacement: function (error, element) {
                    error.addClass("invalid-feedback");
                    element.closest(".form-group").append(error);
                },
                highlight: function (element) {
                    $(element).addClass("is-invalid").removeClass("is-valid");
                },
                unhighlight: function (element) {
                    $(element).removeClass("is-invalid").addClass("is-valid");
                },
                submitHandler: function (form) {
                    if (cart.length === 0) {
                        showToast('Please add at least one product to create an order.', 'danger');
                        return false;
                    }
                    form.submit();
                }
            });

            function toggleSelectProductsButton() {
                const customerId = $('#CustomerID').val();
                const warehouseId = $('#WarehouseID').val();
                const isValid = customerId && warehouseId && customerId !== "" && warehouseId !== "";
                $selectProductsBtn.prop('disabled', !isValid);
            }

            $('#CustomerID, #WarehouseID').on('change', toggleSelectProductsButton);
            toggleSelectProductsButton();

            $selectProductsBtn.on('click', function () {
                if (!$selectProductsBtn.prop('disabled')) {
                    loadProducts();
                    $('#productModal').modal('show');
                }
            });
        });

        function loadCategories() {
            $('#categoryFilter').val('');
            loadProducts();
        }

        function loadProducts() {
            const warehouseId = $('#WarehouseID').val();
            const categoryId = $('#categoryFilter').val();

            if (!warehouseId) {
                showToast('Please select a warehouse first.', 'danger');
                return;
            }

            $('#loadingSpinner').show();
            $('#productsTable').hide();
            $('#emptyState').hide();
            $('#productsModalBody').empty();

            $.ajax({
                url: '@Url.Action("GetProductsByWarehouseAndCategory", "Orders")',
                type: 'GET',
                data: {
                    warehouseId: warehouseId,
                    categoryId: categoryId || null
                },
                success: function (response) {
                    $('#productsModalBody').empty();
                    if (response.length === 0) {
                        $('#emptyState').show();
                    } else {
                        response.forEach(product => {
                            const existingItem = cart.find(item => item.productId === product.productID);
                            const row = `
                                <tr data-product-id="${product.productID}">
                                    <td>${product.productName}</td>
                                    <td>${product.categoryName}</td>
                                    <td>$${product.price.toFixed(2)}</td>
                                    <td>${product.stockQuantity}</td>
                                    <td>
                                        <input type="number" class="form-control quantity-input"
                                               min="1" max="${product.stockQuantity}"
                                               value="${existingItem ? existingItem.quantity : 1}">
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary add-product-btn">
                                            <i class="fas fa-${existingItem ? 'sync-alt' : 'plus'}"></i> ${existingItem ? 'Update' : 'Add'}
                                        </button>
                                    </td>
                                </tr>`;
                            $('#productsModalBody').append(row);
                        });

                        $('.add-product-btn').off('click').on('click', function() {
                            const row = $(this).closest('tr');
                            addProductToCart(row);
                        });
                    }
                    $('#loadingSpinner').hide();
                    $('#productsTable').show();
                },
                error: function (xhr) {
                    $('#loadingSpinner').hide();
                    $('#productsModalBody').html('<tr><td colspan="6" class="text-center text-danger">Error loading products</td></tr>');
                    showToast('Error loading products: ' + (xhr.responseJSON?.message || xhr.responseText), 'danger');
                }
            });
        }

        function addProductToCart(row) {
            const productId = row.data('product-id');
            const productName = row.find('td:eq(0)').text();
            const price = parseFloat(row.find('td:eq(2)').text().replace('$', ''));
            const stock = parseInt(row.find('td:eq(3)').text());
            const quantityInput = row.find('.quantity-input');
            const quantity = parseInt(quantityInput.val());
            const warehouseId = $('#WarehouseID').val();

            if (isNaN(quantity)) {
                showToast('Please enter a valid quantity', 'danger');
                quantityInput.focus();
                return;
            }

            if (quantity <= 0) {
                showToast('Quantity must be greater than 0', 'danger');
                quantityInput.focus();
                return;
            }

            if (quantity > stock) {
                showToast(`Cannot add ${quantity}. Only ${stock} available in stock`, 'danger');
                quantityInput.focus();
                return;
            }

            const token = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '@Url.Action("ValidateAndAddProduct", "Orders")',
                type: 'POST',
                data: {
                    warehouseId: warehouseId,
                    productId: productId,
                    quantity: quantity,
                    __RequestVerificationToken: token
                },
                success: function (response) {
                    if (response.success) {
                        const existingIndex = cart.findIndex(item => item.productId === response.product.productId);
                        if (existingIndex >= 0) {
                            cart[existingIndex].quantity = response.product.quantity;
                            cart[existingIndex].totalPrice = response.product.totalPrice;
                        } else {
                            cart.push({
                                productId: response.product.productId,
                                productName: productName,
                                quantity: response.product.quantity,
                                unitPrice: response.product.unitPrice,
                                totalPrice: response.product.totalPrice
                            });
                        }
                        updateSelectedProducts();
                        showToast(`${productName} added to order`, 'success');
                        row.find('.add-product-btn')
                           .html('<i class="fas fa-sync-alt"></i> Update')
                           .removeClass('btn-primary')
                           .addClass('btn-success');
                    } else {
                        showToast(response.message, 'danger');
                    }
                },
                error: function (xhr) {
                    showToast('Error validating product: ' + (xhr.responseJSON?.message || xhr.responseText), 'danger');
                }
            });
        }

        function updateSelectedProducts() {
            const $tableBody = $('#productsTableBody');
            $tableBody.empty();

            let totalAmount = 0;

            if (cart.length === 0) {
                $tableBody.html('<tr><td colspan="5" class="text-center text-muted">No products selected</td></tr>');
            } else {
                cart.forEach((item, index) => {
                    totalAmount += item.totalPrice;
                    const itemHtml = `
                        <tr>
                            <td>${item.productName}</td>
                            <td>${item.quantity}</td>
                            <td>$${item.unitPrice.toFixed(2)}</td>
                            <td>$${item.totalPrice.toFixed(2)}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-danger" onclick="removeFromCart(${index})">
                                    <i class="fas fa-trash-alt"></i> Remove
                                </button>
                                <input type="hidden" name="OrderDetails[${index}].ProductID" value="${item.productId}" />
                                <input type="hidden" name="OrderDetails[${index}].Quantity" value="${item.quantity}" />
                            </td>
                        </tr>`;
                    $tableBody.append(itemHtml);
                });
            }

            $('#totalAmount').text('$' + totalAmount.toFixed(2));
        }

        function removeFromCart(index) {
            const productName = cart[index].productName;
            cart.splice(index, 1);
            updateSelectedProducts();
            showToast(`${productName} removed from order`, 'warning');
            
            // Update the button in the modal if it's open
            if ($('#productModal').hasClass('show')) {
                loadProducts();
            }
        }

        function saveProducts() {
            if (cart.length === 0) {
                showToast('Please add at least one product.', 'danger');
                return;
            }
            updateSelectedProducts();
            $('#productModal').modal('hide');
        }

        function showToast(message, type) {
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);

            $('#toastContainer').append(toast);
            const bsToast = new bootstrap.Toast(toast[0], { delay: 3000 });
            bsToast.show();

            toast.on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }
    </script>
}
