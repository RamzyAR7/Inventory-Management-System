@model OrderReqDto
@using IMS.Data.Entities
@using IMS.BAL.DTOs.Order.Request

@{
    ViewData["Title"] = "Edit Order";
}

<h1>Edit Order</h1>

@if (TempData["error"] != null)
{
    <div class="alert alert-danger" role="alert">@TempData["error"]</div>
}

<form id="orderForm" asp-action="Edit" asp-route-id="@Model.OrderID" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="OrderID" />
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group">
        <label asp-for="CustomerID" class="control-label"></label>
        <select asp-for="CustomerID" class="form-control" asp-items="ViewBag.Customers">
            <option value="">Select Customer</option>
        </select>
        <span asp-validation-for="CustomerID" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="WarehouseID" class="control-label"></label>
        <select asp-for="WarehouseID" class="form-control" asp-items="ViewBag.Warehouses" onchange="loadCategories()">
            <option value="">Select Warehouse</option>
        </select>
        <span asp-validation-for="WarehouseID" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label class="control-label">Selected Products</label>
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#productModal" aria-label="Select Products">
            Select Products
        </button>
        <table class="table table-bordered" id="selectedProductsTable">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Total Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="productsTableBody"></tbody>
        </table>
        <div>
            <strong>Total Amount: </strong><span id="totalAmount">0.00</span>
        </div>
    </div>

    <div class="form-group">
        <input type="submit" value="Update" class="btn btn-primary" aria-label="Update Order" />
        <a asp-action="Index" class="btn btn-secondary" aria-label="Cancel">Cancel</a>
    </div>
</form>

<!-- Product Selection Modal -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Select Products</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="categoryFilter">Category</label>
                    <select id="categoryFilter" class="form-control" asp-items="ViewBag.Categories" onchange="loadProducts()">
                        <option value="">All Categories</option>
                    </select>
                </div>
                <div id="loadingSpinner" style="display:none; text-align:center;">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
                <table class="table table-bordered" id="productsTable" style="display:none;">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Quantity</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productsTableBody"></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="saveProducts()" aria-label="Save Selected Products">Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" aria-label="Close Modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.3/dist/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.3/dist/additional-methods.min.js"></script>
    <script>
        let cart = @Html.Raw(Json.Serialize(Model.OrderDetails.Select(d => new
            {
                productId = d.ProductID.ToString(),
                productName = "", // Populated client-side
                quantity = d.Quantity,
                unitPrice = 0, // Populated client-side
                totalPrice = 0 // Populated client-side
            })));

        $(document).ready(function () {
            $("#orderForm").validate({
                rules: {
                    CustomerID: { required: true },
                    WarehouseID: { required: true }
                },
                messages: {
                    CustomerID: "Please select a customer.",
                    WarehouseID: "Please select a warehouse."
                },
                errorElement: "span",
                errorPlacement: function (error, element) {
                    error.addClass("text-danger");
                    error.insertAfter(element);
                }
            });

            $('#productModal').on('show.bs.modal', function () {
                loadProducts();
            });

            // Initialize selected products
            loadProducts();
        });

        function loadCategories() {
            $('#categoryFilter').val('');
            loadProducts();
        }

        function loadProducts() {
            const warehouseId = $('#WarehouseID').val();
            const categoryId = $('#categoryFilter').val();

            if (!warehouseId) {
                $('#productsTableBody').empty();
                alert('Please select a warehouse first.');
                return;
            }

            $('#loadingSpinner').show();
            $('#productsTable').hide();

            $.ajax({
                url: '@Url.Action("GetProductsByWarehouseAndCategory", "Orders")',
                type: 'GET',
                data: { warehouseId: warehouseId, categoryId: categoryId },
                success: function (products) {
                    $('#productsTableBody').empty();
                    products.forEach(product => {
                        const existingItem = cart.find(item => item.productId === product.productID);
                        if (existingItem && !existingItem.productName) {
                            existingItem.productName = product.productName;
                            existingItem.unitPrice = product.price;
                            existingItem.totalPrice = product.price * existingItem.quantity;
                        }
                        const row = `
                            <tr>
                                <td>${product.productName}</td>
                                <td>${product.categoryName}</td>
                                <td>${product.price.toFixed(2)}</td>
                                <td>${product.stockQuantity}</td>
                                <td>
                                    <input type="number" min="1" max="${product.stockQuantity}" class="form-control quantity"
                                           data-product-id="${product.productID}" value="${existingItem ? existingItem.quantity : ''}"
                                           aria-label="Quantity for ${product.productName}"/>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary"
                                            onclick="addToCart('${product.productID}', '${product.productName}', ${product.price}, ${product.stockQuantity})"
                                            aria-label="Add ${product.productName} to Cart">Add</button>
                                </td>
                            </tr>`;
                        $('#productsTableBody').append(row);
                    });
                    updateSelectedProducts();
                    $('#loadingSpinner').hide();
                    $('#productsTable').show();
                },
                error: function (xhr) {
                    $('#loadingSpinner').hide();
                    $('#productsTable').show();
                    alert('Error loading products: ' + (xhr.responseText || 'Unknown error'));
                }
            });
        }

        function addToCart(productId, productName, price, stockQuantity) {
            const quantityInput = $(`input[data-product-id="${productId}"]`);
            const quantity = parseInt(quantityInput.val());

            if (!quantity || quantity <= 0 || quantity > stockQuantity) {
                alert(`Please enter a valid quantity (1 to ${stockQuantity}).`);
                return;
            }

            const existingItemIndex = cart.findIndex(item => item.productId === productId);
            if (existingItemIndex >= 0) {
                cart[existingItemIndex].quantity = quantity;
                cart[existingItemIndex].totalPrice = price * quantity;
            } else {
                cart.push({
                    productId: productId,
                    productName: productName,
                    quantity: quantity,
                    unitPrice: price,
                    totalPrice: price * quantity
                });
            }

            updateSelectedProducts();
            quantityInput.val('');
        }

        function updateSelectedProducts() {
            $('#selectedProductsTable tbody').empty();
            let totalAmount = 0;

            cart.forEach((item, index) => {
                totalAmount += item.totalPrice;
                const itemHtml = `
                    <tr class="selected-product" data-index="${index}">
                        <td>${item.productName}</td>
                        <td>${item.quantity}</td>
                        <td>${item.unitPrice.toFixed(2)}</td>
                        <td>${item.totalPrice.toFixed(2)}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger" onclick="removeFromCart(${index})" aria-label="Remove ${item.productName}">Remove</button>
                        </td>
                        <input type="hidden" name="OrderDetails[${index}].ProductID" value="${item.productId}" />
                        <input type="hidden" name="OrderDetails[${index}].Quantity" value="${item.quantity}" />
                    </tr>`;
                $('#selectedProductsTable tbody').append(itemHtml);
            });

            $('#totalAmount').text(totalAmount.toFixed(2));
        }

        function removeFromCart(index) {
            cart.splice(index, 1);
            updateSelectedProducts();
        }

        function saveProducts() {
            if (!cart.length) {
                alert('Please add at least one product.');
                return;
            }
            updateSelectedProducts();
            $('#productModal').modal('hide');
        }
    </script>
}
