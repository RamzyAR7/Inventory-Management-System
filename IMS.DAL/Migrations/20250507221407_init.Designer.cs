// <auto-generated />
using System;
using IMS.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMS.DAL.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250507221407_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMS.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("IMS.Domain.Entities.DeliveryMan", b =>
                {
                    b.Property<Guid>("DeliveryManID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("DeliveryManID");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.HasIndex("ManagerID");

                    b.ToTable("DeliveryMen");
                });

            modelBuilder.Entity("IMS.Domain.Entities.InventoryTransaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SuppliersID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SuppliersID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IMS.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecoderLevel")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("ShipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryManID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShipmentID");

                    b.HasIndex("DeliveryManID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierID");

                    b.HasIndex("SupplierName")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("IMS.Domain.Entities.SupplierProduct", b =>
                {
                    b.Property<Guid>("SupplierID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupplierID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("SupplierProducts");
                });

            modelBuilder.Entity("IMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ManagerID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("ac108da2-f18b-4de8-8d49-7e4af6af4a1e"),
                            CreatedAt = new DateTime(2025, 5, 7, 22, 14, 6, 328, DateTimeKind.Utc).AddTicks(9974),
                            Email = "admin@gmail.com",
                            HashedPassword = "$2a$11$BkBhc4N3C7yz59AluO2ZdenrLI27FqQI8J.BIM.SBsDIdmAISYwEu",
                            IsActive = true,
                            Role = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("IMS.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WarehouseID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("WarehouseName")
                        .IsUnique();

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("IMS.Domain.Entities.WarehouseStock", b =>
                {
                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("WarehouseID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("WarehouseStocks");
                });

            modelBuilder.Entity("IMS.Domain.Entities.WarehouseTransfers", b =>
                {
                    b.Property<Guid>("WarehouseTransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ToProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WarehouseTransferID");

                    b.HasIndex("FromProductID");

                    b.HasIndex("FromWarehouseID");

                    b.HasIndex("InTransactionID");

                    b.HasIndex("OutTransactionID");

                    b.HasIndex("ToProductID");

                    b.HasIndex("ToWarehouseID");

                    b.ToTable("WarehouseTransfers");
                });

            modelBuilder.Entity("IMS.Domain.Entities.DeliveryMan", b =>
                {
                    b.HasOne("IMS.Domain.Entities.User", "Manager")
                        .WithMany("DeliveryMen")
                        .HasForeignKey("ManagerID");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("IMS.Domain.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("IMS.Domain.Entities.Order", "Order")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("OrderID");

                    b.HasOne("IMS.Domain.Entities.Product", "Product")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Supplier", "Suppliers")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("SuppliersID");

                    b.HasOne("IMS.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Suppliers");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Order", b =>
                {
                    b.HasOne("IMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Orders")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Orders")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("IMS.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("IMS.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Product", b =>
                {
                    b.HasOne("IMS.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("IMS.Domain.Entities.DeliveryMan", "DeliveryMan")
                        .WithMany("Shipments")
                        .HasForeignKey("DeliveryManID");

                    b.HasOne("IMS.Domain.Entities.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("IMS.Domain.Entities.Shipment", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMan");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IMS.Domain.Entities.SupplierProduct", b =>
                {
                    b.HasOne("IMS.Domain.Entities.Product", "Product")
                        .WithMany("Suppliers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IMS.Domain.Entities.User", b =>
                {
                    b.HasOne("IMS.Domain.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("IMS.Domain.Entities.User", "Manager")
                        .WithMany("ManagedWarehouses")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("IMS.Domain.Entities.WarehouseStock", b =>
                {
                    b.HasOne("IMS.Domain.Entities.Product", "Product")
                        .WithMany("WarehouseStocks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseStocks")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("IMS.Domain.Entities.WarehouseTransfers", b =>
                {
                    b.HasOne("IMS.Domain.Entities.Product", "FromProduct")
                        .WithMany("FromWarehouseTransfers")
                        .HasForeignKey("FromProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Warehouse", "FromWarehouse")
                        .WithMany("FromWarehouseTransfers")
                        .HasForeignKey("FromWarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.InventoryTransaction", "InTransaction")
                        .WithMany("InTransfers")
                        .HasForeignKey("InTransactionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.InventoryTransaction", "OutTransaction")
                        .WithMany("OutTransfers")
                        .HasForeignKey("OutTransactionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Product", "ToProduct")
                        .WithMany("ToWarehouseTransfers")
                        .HasForeignKey("ToProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMS.Domain.Entities.Warehouse", "ToWarehouse")
                        .WithMany("ToWarehouseTransfers")
                        .HasForeignKey("ToWarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromProduct");

                    b.Navigation("FromWarehouse");

                    b.Navigation("InTransaction");

                    b.Navigation("OutTransaction");

                    b.Navigation("ToProduct");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("IMS.Domain.Entities.DeliveryMan", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("IMS.Domain.Entities.InventoryTransaction", b =>
                {
                    b.Navigation("InTransfers");

                    b.Navigation("OutTransfers");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Order", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Shipment")
                        .IsRequired();
                });

            modelBuilder.Entity("IMS.Domain.Entities.Product", b =>
                {
                    b.Navigation("FromWarehouseTransfers");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Suppliers");

                    b.Navigation("ToWarehouseTransfers");

                    b.Navigation("WarehouseStocks");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("IMS.Domain.Entities.User", b =>
                {
                    b.Navigation("DeliveryMen");

                    b.Navigation("ManagedWarehouses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("IMS.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("FromWarehouseTransfers");

                    b.Navigation("InventoryTransactions");

                    b.Navigation("Orders");

                    b.Navigation("ToWarehouseTransfers");

                    b.Navigation("WarehouseStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
